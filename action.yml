name: 'Connect to Twingate'
description: 'Connects to Twingate protected resources from your Github Action workflow'
branding:
  icon: 'arrow-right-circle'
  color: 'black'
inputs:
  service-key:
    description: 'Twingate Service Key'
    required: true
  auto-cleanup:
    description: 'Automatically cleanup Twingate connection after workflow completes'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Error if unsupported runner.os
      if: runner.os != 'Linux' && runner.os != 'Windows'
      shell: bash
      run: |
        echo "Unsupported Runner OS: ${{ runner.os }}"
        exit 1
        
    # Store state for post-action cleanup
    - name: Initialize cleanup state
      shell: bash
      run: |
        echo "TWINGATE_CLEANUP_ENABLED=${{ inputs.auto-cleanup }}" >> $GITHUB_ENV
        echo "TWINGATE_OS=${{ runner.os }}" >> $GITHUB_ENV
        echo "TWINGATE_SETUP_ATTEMPTED=true" >> $GITHUB_ENV
        
    - name: Install Twingate (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt update
        echo "deb [trusted=yes] https://packages.twingate.com/apt/ /" | sudo tee /etc/apt/sources.list.d/twingate.list
        sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/twingate.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
        sudo apt install -yq twingate
        echo "TWINGATE_INSTALLED=true" >> $GITHUB_ENV
    
    - name: Setup and start Twingate (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo '${{ inputs.service-key }}' | sudo twingate setup --headless -
        MAX_RETRIES=5
        WAIT_TIME=5
        n=0
        while [ $n -lt $MAX_RETRIES ]; do
          echo "Starting Twingate service..."
          set +xe
          twingate config log-level debug
          twingate start
          echo "Waiting $WAIT_TIME seconds for Twingate service to start..."
          sleep $WAIT_TIME
          status=$(twingate status)
          echo "Twingate service status: '$status'"
          if [ "$status" = "online" ]; then
            echo "Twingate service is connected."
            twingate resources
            journalctl -u twingate --no-pager
            echo "TWINGATE_CONNECTED=true" >> $GITHUB_ENV
            break
          else
            twingate stop
            journalctl -u twingate --no-pager
          fi
          # Increment the retry counter and wait time
          n=$((n+1))
          WAIT_TIME=$((WAIT_TIME+5))
          echo "Twingate service is not connected. Retrying ..."
        done
        if [ $n -eq $MAX_RETRIES ]; then
          echo "Twingate service failed to connect."
          exit 1
        fi
        
    - name: Install and Start Twingate (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
          Invoke-WebRequest https://api.twingate.com/download/windows?installer=msi -OutFile .\twingate_client.msi
          Set-Content .\key.json  '${{ inputs.service-key }}'
          $key_path = (Get-Item .\key.json | Resolve-Path).ProviderPath
          Start-Process msiexec.exe -Wait -ArgumentList "/i twingate_client.msi service_secret=$key_path /quiet"
          
          Start-Service twingate.service
          Start-Sleep -Seconds 10
          Get-Service twingate.service
          
          # Set environment variable for cleanup
          echo "TWINGATE_CONNECTED=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

  # Post-action cleanup (runs automatically after the workflow completes)
  post-if: always() # Ensures cleanup runs even if the workflow fails
  post:
    # Linux cleanup
    - name: Cleanup Twingate Connection (Linux)
      if: env.TWINGATE_CLEANUP_ENABLED == 'true' && env.TWINGATE_OS == 'Linux' && env.TWINGATE_SETUP_ATTEMPTED == 'true'
      shell: bash
      run: |
        echo "üßπ Starting Twingate cleanup for Linux..."
        
        # Stop Twingate service gracefully
        if command -v twingate &> /dev/null; then
          echo "Stopping Twingate client..."
          twingate stop 2>/dev/null || true
          sleep 2
        fi
        
        # Stop systemd service if running
        if systemctl is-active --quiet twingate 2>/dev/null; then
          echo "Stopping Twingate systemd service..."
          sudo systemctl stop twingate 2>/dev/null || true
        fi
        
        # Kill any remaining Twingate processes
        echo "Terminating any remaining Twingate processes..."
        sudo pkill -f twingate 2>/dev/null || true
        
        # Clean up any Twingate network interfaces
        for iface in $(ip link show | grep -o 'utun[0-9]*' 2>/dev/null || true); do
          echo "Removing network interface: $iface"
          sudo ip link delete "$iface" 2>/dev/null || true
        done
        
        echo "‚úÖ Linux Twingate cleanup completed"
        
    # Windows cleanup  
    - name: Cleanup Twingate Connection (Windows)
      if: env.TWINGATE_CLEANUP_ENABLED == 'true' && env.TWINGATE_OS == 'Windows' && env.TWINGATE_SETUP_ATTEMPTED == 'true'
      shell: powershell
      run: |
        Write-Host "üßπ Starting Twingate cleanup for Windows..."
        
        try {
          # Stop Twingate service
          Write-Host "Stopping Twingate service..."
          Stop-Service -Name "twingate.service" -Force -ErrorAction SilentlyContinue
          
          # Wait a moment for graceful shutdown
          Start-Sleep -Seconds 3
          
          # Kill any remaining Twingate processes
          Write-Host "Terminating any remaining Twingate processes..."
          Get-Process -Name "*twingate*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          
          Write-Host "‚úÖ Windows Twingate cleanup completed"
        }
        catch {
          Write-Host "‚ö†Ô∏è Cleanup encountered an issue: $($_.Exception.Message)"
        }
        
    # Final cleanup status
    - name: Cleanup Status
      if: env.TWINGATE_CLEANUP_ENABLED == 'true' && env.TWINGATE_SETUP_ATTEMPTED == 'true'
      shell: bash
      run: |
        echo "üîí Twingate connection cleanup process completed"
        echo "Connection was properly terminated before workflow finish"
